* Config

** Path
*** site-lisp
#+begin_src emacs-lisp
(let ( (default-directory
         (file-name-as-directory (concat user-emacs-directory "site-lisp")))
       )
  (add-to-list 'load-path default-directory)
  (normal-top-level-add-subdirs-to-load-path)
  )

#+end_src
** パッケージ管理
*** package manager
#+begin_src emacs-lisp
(setq package-archives
      '(("gnu"         . "http://elpa.gnu.org/packages/")
        ("org"         . "http://orgmode.org/elpa/")
        ("melpa"       . "http://melpa.org/packages/")
        ("marmalade"   . "http://marmalade-repo.org/packages/")))
(package-initialize)
(require 'use-package)
#+end_src
*** use-package
- use-packageを使用する。
  #+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-verbose t)
  ; パッケージが無ければ自動インストール
  (setq use-package-always-ensure t)
  (require 'use-package)
  #+end_src
- use-package ライブラリが存在しない場合に、init.el の評価が途中で失敗することを回避。
  #+begin_src emacs-lisp
  ; 何もしないマクロ定義
  (unless (require 'use-package nil t)
    (defmacro use-package (&rest args)))
  #+end_src
** 編集
*** リージョンを削除できるように
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src
*** C-hでbackspace
#+begin_src emacs-lisp
(define-key key-translation-map (kbd "C-h") (kbd "<DEL>"))
#+end_src
*** Home, End で、バッファの先頭、終端
#+begin_src emacs-lisp
(global-set-key [home] 'beginning-of-buffer)
(global-set-key [end] 'end-of-buffer)
#+end_src
*** TAB幅設定
#+begin_src emacs-lisp
;; TABの表示幅。初期値は8
(setq-default tab-width 4)
#+end_src
*** cua-modeの設定 (矩形選択)
#+begin_src emacs-lisp
(cua-mode t) ; cua-modeをオン
(setq cua-enable-cua-keys nil) ; CUAキーバインドを無効にする
#+end_src
*** redo, undo
#+begin_src emacs-lisp
;; redo+
(use-package redo+
  :bind ("C-?" . redo))
;; undo-hist
(use-package undohist
  :config (undohist-initialize))
;; undo-tree
(use-package undo-tree
  :config
  (global-undo-tree-mode))
;; point-undo
(use-package point-undo
  :bind (("M-[" . point-undo)
		 ("M-]" . point-redo)))
#+end_src
** 日本語
*** 文字コード
#+begin_src emacs-lisp
;; デフォルトの文字コード
(set-default-coding-systems 'utf-8-dos)

;; テキストファイル／新規バッファの文字コード
(prefer-coding-system 'utf-8-dos)

;; ファイル名の文字コード
(set-file-name-coding-system 'utf-8-unix)

;; キーボード入力の文字コード
(set-keyboard-coding-system 'utf-8-unix)

;; サブプロセスのデフォルト文字コード
(setq default-process-coding-system '(undecided-dos . utf-8-unix))

;; 環境依存文字 文字化け対応
(set-charset-priority 'ascii 'japanese-jisx0208 'latin-jisx0201
                      'katakana-jisx0201 'iso-8859-1 'cp1252 'unicode)
(set-coding-system-priority 'utf-8 'euc-jp 'iso-2022-jp 'cp932)
#+end_src
*** 日本語入力
- 日本語IME設定, [[https://github.com/chuntaro/NTEmacs64][GitHub - chuntaro/NTEmacs64: Windows版Emacs(通称 NTEmacs)の64bit版]]
  #+begin_src emacs-lisp
  ;; (set-language-environment "UTF-8") ;; UTF-8 でも問題ないので適宜コメントアウトしてください
  (setq default-input-method "W32-IME")
  (setq-default w32-ime-mode-line-state-indicator "[--]")
  (setq w32-ime-mode-line-state-indicator-list '("[--]" "[あ]" "[--]"))
  (w32-ime-initialize)
  #+end_src
- 日本語入力時にカーソルの色を変える設定 (色は適宜変えてください)
  #+begin_src emacs-lisp
  (add-hook 'w32-ime-on-hook '(lambda () (set-cursor-color "coral4")))
  (add-hook 'w32-ime-off-hook '(lambda () (set-cursor-color "black")))
  #+end_src
- 状況に応じて日本語入力設定を無効化
  #+begin_src emacs-lisp
  ;; ミニバッファに移動した際は最初に日本語入力が無効な状態にする
  (add-hook 'minibuffer-setup-hook 'deactivate-input-method)
   
  ;; isearch に移行した際に日本語入力を無効にする
  (add-hook 'isearch-mode-hook '(lambda ()
                                  (deactivate-input-method)
                                  (setq w32-ime-composition-window (minibuffer-window))))
  (add-hook 'isearch-mode-end-hook '(lambda () (setq w32-ime-composition-window nil)))
   
  ;; helm 使用中に日本語入力を無効にする
  (advice-add 'helm :around '(lambda (orig-fun &rest args)
                               (let ((select-window-functions nil)
                                     (w32-ime-composition-window (minibuffer-window)))
                                 (deactivate-input-method)
                                 (apply orig-fun args))))
  #+end_src
- USキーボード対応
  #+begin_src emacs-lisp
  ; USキーボードで日本語入力のON/OFFを切り替えるのに"Alt-`"
  ; を使うとメッセージが出るのを抑止する。
  (global-set-key [M-kanji] 'ignore)
  #+end_src
** 画面表示
*** フォント
#+begin_src emacs-lisp
;; デフォルト フォント
;; (set-face-attribute 'default nil :family "Migu 1M" :height 110)
;(set-face-font 'default "Migu 1M-11:antialias=standard")
(set-face-font 'default "Myrica M-11:antialias=natural")

;; プロポーショナル フォント
;; (set-face-attribute 'variable-pitch nil :family "Migu 1M" :height 110)
;(set-face-font 'variable-pitch "Migu 1M-11:antialias=standard")
(set-face-font 'variable-pitch "Myrica M-11:antialias=natural")

;; 等幅フォント
;; (set-face-attribute 'fixed-pitch nil :family "Migu 1M" :height 110)
;(set-face-font 'fixed-pitch "Migu 1M-11:antialias=standard")
(set-face-font 'fixed-pitch "Myrica M-11:antialias=natural")

;; ツールチップ表示フォント
;; (set-face-attribute 'tooltip nil :family "Migu 1M" :height 90)
;(set-face-font 'tooltip "Migu 1M-9:antialias=standard")
(set-face-font 'tooltip "Myrica M-9:antialias=natural")
#+end_src
*** フォントサイズ調整
#+begin_src emacs-lisp
;; フォントサイズ調整
(global-set-key (kbd "C-<wheel-up>")   '(lambda() (interactive) (text-scale-increase 1)))
(global-set-key (kbd "C-=")            '(lambda() (interactive) (text-scale-increase 1)))
(global-set-key (kbd "C-<wheel-down>") '(lambda() (interactive) (text-scale-decrease 1)))
(global-set-key (kbd "C--")            '(lambda() (interactive) (text-scale-decrease 1)))

;; フォントサイズ リセット
(global-set-key (kbd "M-0") '(lambda() (interactive) (text-scale-set 0)))
#+end_src
*** フレーム
#+begin_src emacs-lisp
(setq default-frame-alist
      (append '((width                . 95)  ; フレーム幅
                (height               . 55 ) ; フレーム高
                (left                 . 200 ) ; 配置左位置
                (top                  . 20 ) ; 配置上位置
                (line-spacing         . 0  ) ; 文字間隔
                (left-fringe          . 10 ) ; 左フリンジ幅
                (right-fringe         . 11 ) ; 右フリンジ幅
                (menu-bar-lines       . 1  ) ; メニューバー
                (tool-bar-lines       . 1  ) ; ツールバー
                (vertical-scroll-bars . 1  ) ; スクロールバー
                (scroll-bar-width     . 17 ) ; スクロールバー幅
                (cursor-type          . box) ; カーソル種別
                (alpha                . 100) ; 透明度
                ) default-frame-alist) )
(setq initial-frame-alist default-frame-alist)

;; フレーム タイトル
(setq frame-title-format
	  (format "%%f - Emacs %s@%s" emacs-version system-name))


;; フルスクリーン化
(global-set-key (kbd "<M-return>") 'toggle-frame-fullscreen)
#+end_src
*** 初期画面を非表示
#+begin_src emacs-lisp
;; 初期画面の非表示（有効：t、無効：nil）
(setq inhibit-startup-message nil)
(setq inhibit-startup-screen t)
#+end_src
*** ツールバーを非表示
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
*** 警告音の代わりに画面フラッシュ
  #+begin_src emacs-lisp
  (setq visible-bell t)
  #+end_src
*** モードライン表示
- モードラインの設定
  #+begin_src emacs-lisp
  ;; 行番号の表示（有効：t、無効：nil）
  (line-number-mode t)
  ;; 列番号の表示（有効：t、無効：nil）
  (column-number-mode t)
   
  ;; モードライン カスタマイズ
  (setq-default
   mode-line-format
   `(
     ""
     w32-ime-mode-line-state-indicator
     " "
     mode-line-mule-info
     mode-line-modified
     mode-line-frame-identification
     mode-line-buffer-identification
     " "
     global-mode-string
     " %[("
     mode-name
     mode-line-process
     "%n"
     ")%] "
     (which-func-mode ("" which-func-format " "))
     (line-number-mode
      (:eval
       (format "L%%l/L%d " (count-lines (point-max) 1) )))
     (column-number-mode " C%c ")
     (-3 . "%p")
     )
   )
  (setq mode-line-frame-identification " ")
  #+end_src
- 文字・改行コード表示のカスタマイズ
  #+begin_src emacs-lisp
  ;; cp932エンコードの表記変更
  (coding-system-put 'cp932 :mnemonic ?P)
  (coding-system-put 'cp932-dos :mnemonic ?P)
  (coding-system-put 'cp932-unix :mnemonic ?P)
  (coding-system-put 'cp932-mac :mnemonic ?P)
   
  ;; UTF-8エンコードの表記変更
  (coding-system-put 'utf-8 :mnemonic ?U)
  (coding-system-put 'utf-8-with-signature :mnemonic ?u)
   
  ;; 改行コードの表記追加
  (setq eol-mnemonic-dos       ":Dos ")
  (setq eol-mnemonic-mac       ":Mac ")
  (setq eol-mnemonic-unix      ":Unx ")
  (setq eol-mnemonic-undecided ":??? ") 
  #+end_src
-モードラインに時刻表示
  #+begin_src emacs-lisp
  ;; 時刻の表示
  (require 'time)
  (setq display-time-24hr-format t)
  (setq display-time-string-forms '(24-hours ":" minutes))
  (display-time-mode t)
  #+end_src
*** バッファ表示
#+begin_src emacs-lisp
;; ウィンドウ縦分割時のバッファ画面外文字の切り詰め表示（有効：t、無効：nil）
(setq truncate-partial-width-windows t)

;; 同一バッファ名にディレクトリ付与
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
(setq uniquify-ignore-buffers-re "*[^*]+*")

#+end_src
*** 行番号表示
#+begin_src emacs-lisp
(require 'linum)

;; 行移動を契機に描画
(defvar linum-line-number 0)
(declare-function linum-update-current "linum" ())
(defadvice linum-update-current
    (around linum-update-current-around activate compile)
  (unless (= linum-line-number (line-number-at-pos))
    (setq linum-line-number (line-number-at-pos))
    ad-do-it
    ))

;; バッファ中の行番号表示の遅延設定
(defvar linum-delay nil)
(setq linum-delay t)
(defadvice linum-schedule (around linum-schedule-around () activate)
  (run-with-idle-timer 1.0 nil #'linum-update-current))

;; 行番号の書式
(defvar linum-format nil)
(setq linum-format "%5d")

;; バッファ中の行番号表示（有効：t、無効：nil）
(global-linum-mode t)

;; 文字サイズ
(set-face-attribute 'linum nil :height 0.75)
#+end_src
*** Theme
#+begin_src emacs-lisp
;; Don't change size of org-mode headlines (but keep other size-changes)
(setq solarized-scale-org-headlines nil)

(load-theme 'solarized-light t)
#+end_src
*** 対応括弧の強調表示
#+begin_src emacs-lisp
;; paren-mode：対応する括弧を強調して表示する
(setq show-paren-delay 0.1) ; 表示までの秒数。初期値は0.125
(show-paren-mode t) ; 有効化

;; parenのスタイル: expressionは括弧内も強調表示
(setq show-paren-style 'mixed)
;; フェイスを変更する
(set-face-background 'show-paren-match-face nil)
(set-face-underline-p 'show-paren-match-face "blue")

#+end_src
** ナビゲーション、移動
*** スクロール
#+begin_src emacs-lisp
;; スクロール時のカーソル位置を維持（有効：t、無効：nil）
(setq scroll-preserve-screen-position t)

;; スクロール開始の残り行数
(setq scroll-margin 0)

;; スクロール時の行数
(setq scroll-conservatively 10000)

;; スクロール時の行数（scroll-marginに影響せず）
(setq scroll-step 0)

;; 画面スクロール時の重複表示する行数
(setq next-screen-context-lines 1)

;; キー入力中の画面更新を抑止（有効：t、無効：nil）
(setq redisplay-dont-pause t)

;; recenter-top-bottomのポジション
(setq recenter-positions '(middle top bottom))

;; 横スクロール開始の残り列数
(setq hscroll-margin 1)

;; 横スクロール時の列数
(setq hscroll-step 1)

;; スクロールダウン
(global-set-key (kbd "C-z") 'scroll-down)

;; バッファの最後までスクロールダウン
(defadvice scroll-down (around scroll-down activate compile)
  (interactive)
  (let (
        (bgn-num (+ 1 (count-lines (point-min) (point))))
        )
    (if (< bgn-num (window-height))
        (goto-char (point-min))
      ad-do-it) ))

;; バッファの先頭までスクロールアップ
(defadvice scroll-up (around scroll-up activate compile)
  (interactive)
  (let (
        (bgn-num (+ 1 (count-lines (point-min) (point))))
        (end-num nil)
        )
    (save-excursion
      (goto-char (point-max))
      (setq end-num (+ 1 (count-lines (point-min) (point))))
      )
    (if (< (- (- end-num bgn-num) (window-height)) 0)
        (goto-char (point-max))
      ad-do-it) ))
#+end_src
*** saveplace カーソル位置を保存
#+begin_src emacs-lisp
(require 'saveplace)
(save-place-mode 1) ;; Changed for Emacs 25
#+end_src
*** buffer選択画面をアクティブウィンドウに表示する。
#+begin_src emacs-lisp
(global-set-key "\C-x\C-b" 'buffer-menu)
#+end_src

** dired
#+begin_src emacs-lisp
;; diredを2つのウィンドウで開いている時に、デフォルトの移動orコピー先をもう一方のdiredで開いているディレクトリにする
(setq dired-dwim-target t)
;; ディレクトリを再帰的にコピーする
(setq dired-recursive-copies 'always)
;; diredバッファでC-sした時にファイル名だけにマッチするように
(setq dired-isearch-filenames t)
#+end_src
** backup
#+begin_src emacs-lisp
;; ファイルオープン時のバックアップ（~）（有効：t、無効：nil）
(setq make-backup-files   t)  ;; 自動バックアップの実行有無
(setq version-control     t)  ;; バックアップファイルへの番号付与
(setq kept-new-versions   3)  ;; 最新バックアップファイルの保持数
(setq kept-old-versions   0)  ;; 最古バックアップファイルの保持数
(setq delete-old-versions t)  ;; バックアップファイル削除の実行有無

;; ファイルオープン時のバックアップ（~）の格納ディレクトリ
(setq backup-directory-alist
      (cons (cons "\\.*$" (expand-file-name "/tmp/emacsbk"))
            backup-directory-alist))

;; 編集中ファイルの自動バックアップ（有効：t、無効：nil）
(setq backup-inhibited nil)

;; 終了時に自動バックアップファイルを削除（有効：t、無効：nil）
(setq delete-auto-save-files nil)

;; 編集中ファイルのバックアップ（有効：t、無効：nil）
(setq auto-save-list-file-name nil)
(setq auto-save-list-file-prefix nil)

;; 編集中ファイルのバックアップ間隔（秒）
(setq auto-save-timeout 3)

;; 編集中ファイルのバックアップ間隔（打鍵）
(setq auto-save-interval 100)

;; 編集中ファイル（##）の格納ディレクトリ
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "/tmp/emacsbk") t)))
#+end_src
*** ロックファイルを生成
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
** isearch
#+begin_src emacs-lisp
;; 大文字・小文字を区別しないでサーチ（有効：t、無効：nil）
(setq-default case-fold-search t)

;; インクリメント検索時に縦スクロールを有効化（有効：t、無効：nil）
(setq isearch-allow-scroll nil)

;; C-dで検索文字列を一文字削除
(define-key isearch-mode-map (kbd "C-d") 'isearch-delete-char)

;; C-yで検索文字列にヤンク貼り付け
(define-key isearch-mode-map (kbd "C-y") 'isearch-yank-kill)

;; C-eで検索文字列を編集
(define-key isearch-mode-map (kbd "C-e") 'isearch-edit-string)

;; Tabで検索文字列を補完
(define-key isearch-mode-map (kbd "TAB") 'isearch-yank-word)

;; C-gで検索を終了
(define-key isearch-mode-map (kbd "C-g")
  '(lambda() (interactive) (isearch-done)))

;; 日本語の検索文字列をミニバッファに表示
(define-key isearch-mode-map (kbd "<compend>")
  '(lambda() (interactive) (isearch-update)))
(define-key isearch-mode-map (kbd "<kanji>")
  'isearch-toggle-input-method)
(add-hook
 'isearch-mode-hook
 '(lambda() (setq w32-ime-composition-window (minibuffer-window)))
 )
(add-hook
 'isearch-mode-end-hook
 '(lambda() (setq w32-ime-composition-window nil))
 )
#+end_src
** org-mode
*** 画面表示
- src blockの色付け
  #+begin_src emacs-lisp
  ;; fontify code in code blocks
  (setq org-src-fontify-natively t)
   
  (setq org-src-tab-acts-natively t)
  #+end_src
- インデント
  #+begin_src emacs-lisp
  (setq org-startup-indented t)
  #+end_src
- ファイルオープン時に見出しのみを表示
  #+begin_src emacs-lisp
  (setq org-startup-folded (quote content))
  #+end_src
*** Key bindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c b") 'org-iswitchb)

(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)
#+end_src

*** ファイルの場所
#+begin_src emacs-lisp
(setq org-directory "~/git/org")
(setq org-default-notes-file "~/git/org/refile.org")
(setq org-agenda-files (quote ("~/git/org")))
#+end_src

*** Todo keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
#+end_src

*** Capture templates
#+begin_src emacs-lisp
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/git/org/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/git/org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/git/org/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/git/org/journal.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/git/org/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/git/org/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/git/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/git/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+end_src

*** Speed keys
#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

*** Clock setup
#+BEGIN_SRC emacs-lisp
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)
;;
;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change tasks to NEXT when clocking in
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

(setq bh/keep-clock-running nil)

(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (bh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (bh/is-project-p))
      "TODO"))))

(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))
#+END_SRC

*** Latex export
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(require 'ox-bibtex)

(setq org-latex-default-class "jsarticle")
(setq org-latex-pdf-process '("latexmk %f"))
#+END_SRC
** packages

*** tabbar タブ表示
#+begin_src emacs-lisp
(use-package tabbar
  :config
  ;; tabbar有効化（有効：t、無効：nil）
  (call-interactively 'tabbar-mode t)

  ;; ボタン非表示
  (dolist (btn '(tabbar-buffer-home-button
                 tabbar-scroll-left-button
                 tabbar-scroll-right-button))
    (set btn (cons (cons "" nil) (cons "" nil)))
    )

  ;; タブ切替にマウスホイールを使用（有効：0、無効：-1）
  (call-interactively 'tabbar-mwheel-mode -1)
  (remove-hook 'tabbar-mode-hook      'tabbar-mwheel-follow)
  (remove-hook 'mouse-wheel-mode-hook 'tabbar-mwheel-follow)

  ;; タブグループを使用（有効：t、無効：nil）
  (defvar tabbar-buffer-groups-function nil)
  (setq tabbar-buffer-groups-function nil)

  ;; タブの表示間隔
  (defvar tabbar-separator nil)
  (setq tabbar-separator '(1.0))

  ;; タブ切り替え
  (global-set-key (kbd "<C-tab>") 'tabbar-forward-tab)
  (global-set-key (kbd "C-q")     'tabbar-backward-tab))
#+end_src
*** recentf
#+begin_src emacs-lisp
;; open recent files
(use-package recentf
  :config
  (setq recentf-max-menu-items 400)
  (setq recentf-exclude '(".recentf"))
  (setq recentf-auto-cleanup 10)
  (setq recentf-auto-save-timer
        (run-with-idle-timer 30 t 'recentf-save-list))
  (defun recentf-ido-find-file ()
	"Find a recent file using Ido."
	(interactive)
	(let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
	  (when file
		(find-file file))))
  (recentf-mode 1)
  :bind
  ("C-x C-r" . recentf-ido-find-file))
#+end_src
*** ido-mode ファイル選択
- ido設定
  #+begin_src emacs-lisp
  (use-package ido
    :init
    (ido-mode t)
    :config
    (setq ido-enable-flex-matching t)
    (when (fboundp 'ido-vertical-mode)
   	(ido-vertical-mode 1))
    ; ido-vertical にて C-n, C-p, ↑, ↓で選択できるようにする
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))
  #+end_src
- M-xをidoで
  #+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :config
    (smex-initialize)
    :bind
    (("M-x" . smex)
     ("M-X" . smex-major-mode-commands)))
  #+end_src
*** migemo
#+begin_src emacs-lisp
(use-package migemo
  :config
  (setq exec-path (append exec-path '("C:\\app\\cmigemo-default-win64")))
  (setq migemo-dictionary "C:/app/cmigemo-default-win64/dict/utf-8/migemo-dict")
  (setq migemo-command "cmigemo")
  (setq migemo-options '("-q" "--emacs"))
  (setq migemo-user-dictionary nil)
  (setq migemo-regex-dictionary nil)
  (setq migemo-coding-system 'utf-8-unix)
  (load-library "migemo")
  (migemo-init))
#+end_src
*** volatile-highlights
yankやundoで変化したところを一時的にハイライト
#+begin_src emacs-lisp
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+end_src

** magit
Windows Gitを使用する場合の設定。
.gitconfigを置く場所がWindows Gitと異なることに注意。
（emacsでの~を見に行っている様子。）
#+begin_src emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-git-executable "C:/Program Files/Git/bin/git.exe")
  )
#+end_src

** Languages
*** Markdown
#+begin_src emacs-lisp
;; markdown-mode
(use-package markdown-mode
   :mode (("\\.md\\'" . markdown-mode))
   )
#+end_src
** _sample
#+begin_src emacs-lisp

#+end_src
